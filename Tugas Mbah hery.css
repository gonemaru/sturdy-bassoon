<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Petualangan Geometri</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');
        body {
          font-family: 'Rajdhani', sans-serif;
          background: linear-gradient(135deg, #121212, #0d0221);
          min-height: 100vh;
          color: #ffffff;
             }        
    
        h1, h2, h3, .cyber-font {
          font-family: 'Orbitron', sans-serif;
    }
    
    .cyber-border {
        position: relative;
        border: 1px solid rgba(5, 217, 232, 0.3);
    }
    
    .cyber-border::before {
        content: '';
        position: absolute;
        top: -2px;
        left: -2px;
        right: -2px;
        bottom: -2px;
        border: 1px solid rgba(255, 42, 109, 0.3);
        z-index: -1;
    }
    
    .cyber-border::after {
        content: '';
        position: absolute;
        top: -3px;
        left: -3px;
        right: -3px;
        bottom: -3px;
        border: 1px solid rgba(211, 0, 197, 0.2);
        z-index: -2;
    }
    
    .cyber-panel {
        background: rgba(26, 26, 26, 0.8);
        border: 1px solid rgba(5, 217, 232, 0.5);
        box-shadow: 0 0 10px rgba(5, 217, 232, 0.2);
        backdrop-filter: blur(5px);
    }
    
    .cyber-button {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .cyber-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: all 0.6s ease;
    }
    
    .cyber-button:hover::before {
        left: 100%;
    }
    
    .shape {
        transition: all 0.3s ease;
    }
    
    .shape:hover {
        transform: scale(1.05);
    }
    
    .option {
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
    }
    
    .option::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 0;
        height: 2px;
        background: #05d9e8;
        transition: width 0.3s ease;
    }
    
    .option:hover::after {
        width: 100%;
    }
    
    .option:hover {
        transform: translateY(-3px);
    }
    
    .correct-answer {
        animation: pulse 1s;
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }
    
    .wrong-answer {
        animation: shake 0.5s;
    }
    
    @keyframes shake {
        0% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        50% { transform: translateX(5px); }
        75% { transform: translateX(-5px); }
        100% { transform: translateX(0); }
    }
    
    .progress-bar {
        transition: width 0.5s ease;
        height: 4px;
    }
    
    .celebration {
        position: absolute;
        pointer-events: none;
        opacity: 0;
    }
    
    .glitch {
        position: relative;
    }
    
    .glitch::before, .glitch::after {
        content: attr(data-text);
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .glitch::before {
        left: 2px;
        text-shadow: -1px 0 #ff2a6d;
        clip: rect(44px, 450px, 56px, 0);
        animation: glitch-anim 5s infinite linear alternate-reverse;
    }
    
    .glitch::after {
        left: -2px;
        text-shadow: -1px 0 #05d9e8;
        clip: rect(44px, 450px, 56px, 0);
        animation: glitch-anim2 5s infinite linear alternate-reverse;
    }
    
    @keyframes glitch-anim {
        0% { clip: rect(31px, 9999px, 94px, 0); }
        5% { clip: rect(70px, 9999px, 71px, 0); }
        10% { clip: rect(29px, 9999px, 83px, 0); }
        15% { clip: rect(38px, 9999px, 40px, 0); }
        20% { clip: rect(16px, 9999px, 86px, 0); }
        25% { clip: rect(75px, 9999px, 25px, 0); }
        30% { clip: rect(28px, 9999px, 59px, 0); }
        35% { clip: rect(46px, 9999px, 18px, 0); }
        40% { clip: rect(82px, 9999px, 68px, 0); }
        45% { clip: rect(31px, 9999px, 35px, 0); }
        50% { clip: rect(94px, 9999px, 73px, 0); }
        55% { clip: rect(2px, 9999px, 92px, 0); }
        60% { clip: rect(70px, 9999px, 27px, 0); }
        65% { clip: rect(95px, 9999px, 2px, 0); }
        70% { clip: rect(99px, 9999px, 97px, 0); }
        75% { clip: rect(37px, 9999px, 47px, 0); }
        80% { clip: rect(26px, 9999px, 69px, 0); }
        85% { clip: rect(2px, 9999px, 35px, 0); }
        90% { clip: rect(38px, 9999px, 53px, 0); }
        95% { clip: rect(87px, 9999px, 62px, 0); }
        100% { clip: rect(81px, 9999px, 37px, 0); }
    }
    
    @keyframes glitch-anim2 {
        0% { clip: rect(14px, 9999px, 27px, 0); }
        5% { clip: rect(67px, 9999px, 31px, 0); }
        10% { clip: rect(84px, 9999px, 8px, 0); }
        15% { clip: rect(33px, 9999px, 93px, 0); }
        20% { clip: rect(46px, 9999px, 36px, 0); }
        25% { clip: rect(9px, 9999px, 37px, 0); }
        30% { clip: rect(71px, 9999px, 30px, 0); }
        35% { clip: rect(88px, 9999px, 89px, 0); }
        40% { clip: rect(33px, 9999px, 61px, 0); }
        45% { clip: rect(72px, 9999px, 26px, 0); }
        50% { clip: rect(25px, 9999px, 55px, 0); }
        55% { clip: rect(33px, 9999px, 8px, 0); }
        60% { clip: rect(26px, 9999px, 73px, 0); }
        65% { clip: rect(90px, 9999px, 86px, 0); }
        70% { clip: rect(96px, 9999px, 31px, 0); }
        75% { clip: rect(12px, 9999px, 23px, 0); }
        80% { clip: rect(95px, 9999px, 73px, 0); }
        85% { clip: rect(7px, 9999px, 12px, 0); }
        90% { clip: rect(57px, 9999px, 22px, 0); }
        95% { clip: rect(69px, 9999px, 47px, 0); }
        100% { clip: rect(92px, 9999px, 9px, 0); }
    }
    
    .scanline {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to bottom, transparent, rgba(5, 217, 232, 0.1), transparent);
        opacity: 0.5;
        pointer-events: none;
        animation: scanline 6s linear infinite;
    }
    
    @keyframes scanline {
        0% { transform: translateY(-100%); }
        100% { transform: translateY(100%); }
    }
</style>
    <!-- Game Container -->
    <div class="cyber-panel rounded-lg overflow-hidden">
        <!-- Game Stats -->
        <div class="bg-cyber-dark p-4 flex justify-between items-center border-b border-neon-blue">
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-neon-blue" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z" clip-rule="evenodd"></path>
                </svg>
                <span class="cyber-font text-neon-blue">LEVEL <span id="level" class="text-white">1</span></span>
            </div>
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-2 text-neon-pink" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                </svg>
                <span class="cyber-font text-neon-pink">SKOR <span id="score" class="text-white">0</span></span>
            </div>
            <div>
                <span id="lives" class="text-neon-green text-xl">❤️❤️❤️</span>
            </div>
        </div>
        
        <!-- Progress Bar -->
        <div class="bg-cyber-dark">
            <div id="progress-bar" class="progress-bar bg-gradient-to-r from-neon-blue to-neon-pink" style="width: 0%"></div>
        </div>
        
        <!-- Game Screens -->
        <div id="game-container" class="p-6">
            <!-- Start Screen -->
            <div id="start-screen" class="text-center py-8">
                <div class="flex justify-center mb-6">
                    <svg class="w-24 h-24 text-neon-blue" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 2.18l7 3.12v5.7c0 4.67-3.13 8.42-7 9.88-3.87-1.45-7-5.2-7-9.88V6.3l7-3.12zm-1 8.82h2v2h-2v-2zm0-6h2v4h-2V6z"/>
                    </svg>
                </div>
                <h2 class="text-2xl font-bold mb-4 text-neon-blue cyber-font">SELAMAT DATANG DI CYBER GEOMETRI</h2>
                <p class="text-gray-300 mb-8 max-w-md mx-auto">Uji pengetahuan geometri Anda dalam simulasi digital dengan menjawab pertanyaan tentang bentuk, sudut, dan rumus-rumus geometri.</p>
                <div class="flex flex-wrap gap-4 justify-center mb-8">
                    <div class="bg-cyber-gray p-4 rounded-lg text-neon-blue flex flex-col items-center cyber-border">
                        <svg class="w-8 h-8 mb-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L4 12l8 10 8-10L12 2z"/>
                        </svg>
                        <span>Bentuk</span>
                    </div>
                    <div class="bg-cyber-gray p-4 rounded-lg text-neon-purple flex flex-col items-center cyber-border">
                        <svg class="w-8 h-8 mb-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L2 22h20L12 2z"/>
                        </svg>
                        <span>Sudut</span>
                    </div>
                    <div class="bg-cyber-gray p-4 rounded-lg text-neon-green flex flex-col items-center cyber-border">
                        <svg class="w-8 h-8 mb-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M4 4h16v16H4z"/>
                        </svg>
                        <span>Luas</span>
                    </div>
                    <div class="bg-cyber-gray p-4 rounded-lg text-neon-pink flex flex-col items-center cyber-border">
                        <svg class="w-8 h-8 mb-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z"/>
                        </svg>
                        <span>Keliling</span>
                    </div>
                </div>
                <button id="start-button" class="cyber-button bg-cyber-gray border border-neon-blue text-neon-blue hover:text-white hover:bg-neon-blue font-bold py-3 px-8 rounded transition">
                    MULAI SIMULASI
                </button>
            </div>
            
            <!-- Question Screen -->
            <div id="question-screen" class="py-6 hidden">
                <div class="mb-6">
                    <h3 class="text-xl font-semibold mb-2 text-neon-blue cyber-font" id="question-text">Pertanyaan akan muncul di sini</h3>
                    <div id="question-image" class="flex justify-center my-4"></div>
                </div>
                
                <div id="options-container" class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    <!-- Options will be inserted here -->
                </div>
                
                <div id="feedback" class="p-4 rounded-lg mb-6 hidden"></div>
                
                <div class="flex justify-between">
                    <button id="hint-button" class="cyber-button bg-cyber-gray border border-neon-yellow text-neon-yellow hover:bg-neon-yellow hover:text-cyber-black font-medium py-2 px-4 rounded transition">
                        PETUNJUK
                    </button>
                    <button id="next-button" class="cyber-button bg-cyber-gray border border-neon-blue text-neon-blue hover:bg-neon-blue hover:text-white font-medium py-2 px-6 rounded transition hidden">
                        LANJUT
                    </button>
                </div>
            </div>
            
            <!-- Game Over Screen -->
            <div id="game-over-screen" class="text-center py-8 hidden">
                <div class="flex justify-center mb-6">
                    <svg class="w-24 h-24 text-neon-pink" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8 0-1.85.63-3.55 1.69-4.9L16.9 18.31C15.55 19.37 13.85 20 12 20zm6.31-3.1L7.1 5.69C8.45 4.63 10.15 4 12 4c4.42 0 8 3.58 8 8 0 1.85-.63 3.55-1.69 4.9z"/>
                    </svg>
                </div>
                <h2 class="text-2xl font-bold mb-4 text-neon-pink cyber-font">SIMULASI BERAKHIR</h2>
                <p class="text-gray-300 mb-4">Anda telah kehabisan nyawa.</p>
                <p class="text-xl font-bold text-neon-blue mb-8">SKOR AKHIR: <span id="final-score" class="text-neon-pink">0</span></p>
                <button id="restart-button" class="cyber-button bg-cyber-gray border border-neon-blue text-neon-blue hover:text-white hover:bg-neon-blue font-bold py-3 px-8 rounded transition">
                    MULAI ULANG
                </button>
            </div>
            
            <!-- Victory Screen -->
            <div id="victory-screen" class="text-center py-8 hidden">
                <div class="flex justify-center mb-6">
                    <svg class="w-24 h-24 text-neon-green" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                </div>
                <h2 class="text-2xl font-bold mb-4 text-neon-green cyber-font">SIMULASI SELESAI</h2>
                <p class="text-gray-300 mb-4">Anda telah menyelesaikan semua level!</p>
                <p class="text-xl font-bold text-neon-blue mb-8">SKOR AKHIR: <span id="victory-score" class="text-neon-green">0</span></p>
                <button id="play-again-button" class="cyber-button bg-cyber-gray border border-neon-green text-neon-green hover:text-cyber-black hover:bg-neon-green font-bold py-3 px-8 rounded transition">
                    MULAI ULANG
                </button>
            </div>
        </div>
    </div>
    
    <!-- Instructions -->
    <div class="mt-8 cyber-panel rounded-lg p-6">
        <h3 class="text-xl font-semibold mb-3 text-neon-blue cyber-font">INSTRUKSI SIMULASI:</h3>
        <ul class="space-y-2">
            <li class="flex items-start">
                <span class="text-neon-pink mr-2">▶</span>
                <span>Jawab pertanyaan geometri dengan memilih opsi yang benar</span>
            </li>
            <li class="flex items-start">
                <span class="text-neon-pink mr-2">▶</span>
                <span>Setiap jawaban benar menambah skor Anda</span>
            </li>
            <li class="flex items-start">
                <span class="text-neon-pink mr-2">▶</span>
                <span>Jawaban salah akan mengurangi nyawa Anda</span>
            </li>
            <li class="flex items-start">
                <span class="text-neon-pink mr-2">▶</span>
                <span>Gunakan petunjuk jika Anda kesulitan</span>
            </li>
            <li class="flex items-start">
                <span class="text-neon-pink mr-2">▶</span>
                <span>Selesaikan semua level untuk menang!</span>
            </li>
        </ul>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Game elements
        const startScreen = document.getElementById('start-screen');
        const questionScreen = document.getElementById('question-screen');
        const gameOverScreen = document.getElementById('game-over-screen');
        const victoryScreen = document.getElementById('victory-screen');
        
        const questionText = document.getElementById('question-text');
        const questionImage = document.getElementById('question-image');
        const optionsContainer = document.getElementById('options-container');
        const feedback = document.getElementById('feedback');
        
        const levelElement = document.getElementById('level');
        const scoreElement = document.getElementById('score');
        const livesElement = document.getElementById('lives');
        const progressBar = document.getElementById('progress-bar');
        const finalScoreElement = document.getElementById('final-score');
        const victoryScoreElement = document.getElementById('victory-score');
        
        // Buttons
        const startButton = document.getElementById('start-button');
        const hintButton = document.getElementById('hint-button');
        const nextButton = document.getElementById('next-button');
        const restartButton = document.getElementById('restart-button');
        const playAgainButton = document.getElementById('play-again-button');
        
        // Game state
        let currentLevel = 1;
        let currentQuestion = 0;
        let score = 0;
        let lives = 3;
        let questions = [];
        let usedHint = false;
        
        // Cyberpunk colors for shapes
        const cyberColors = {
            fill: ['#ff2a6d', '#05d9e8', '#d300c5', '#00ff9f', '#fee800'],
            stroke: ['#ff2a6d', '#05d9e8', '#d300c5', '#00ff9f', '#fee800']
        };
        
        // Questions database
        const allQuestions = [
            // Level 1 - Basic Shapes
            [
                {
                    question: "Berapa jumlah sisi pada segitiga?",
                    image: createShapeSVG("triangle"),
                    options: ["2", "3", "4", "5"],
                    answer: "3",
                    hint: "Hitung jumlah garis yang membentuk bentuk ini."
                },
                {
                    question: "Bentuk geometri apakah ini?",
                    image: createShapeSVG("square"),
                    options: ["Segitiga", "Persegi", "Lingkaran", "Trapesium"],
                    answer: "Persegi",
                    hint: "Bentuk ini memiliki 4 sisi yang sama panjang."
                },
                {
                    question: "Berapa jumlah sudut pada persegi panjang?",
                    image: createShapeSVG("rectangle"),
                    options: ["3", "4", "5", "6"],
                    answer: "4",
                    hint: "Hitung jumlah titik pertemuan antar sisi."
                },
                {
                    question: "Bentuk geometri apakah ini?",
                    image: createShapeSVG("circle"),
                    options: ["Persegi", "Segitiga", "Lingkaran", "Segilima"],
                    answer: "Lingkaran",
                    hint: "Bentuk ini tidak memiliki sudut."
                },
                {
                    question: "Berapa jumlah sisi pada segilima?",
                    image: createShapeSVG("pentagon"),
                    options: ["4", "5", "6", "7"],
                    answer: "5",
                    hint: "Nama bentuk ini memberikan petunjuk tentang jumlah sisinya."
                }
            ],
            
            // Level 2 - Angles
            [
                {
                    question: "Sudut apakah ini?",
                    image: createAngleSVG(90),
                    options: ["Sudut lancip", "Sudut siku-siku", "Sudut tumpul", "Sudut lurus"],
                    answer: "Sudut siku-siku",
                    hint: "Sudut ini besarnya 90 derajat."
                },
                {
                    question: "Sudut apakah ini?",
                    image: createAngleSVG(45),
                    options: ["Sudut lancip", "Sudut siku-siku", "Sudut tumpul", "Sudut lurus"],
                    answer: "Sudut lancip",
                    hint: "Sudut ini kurang dari 90 derajat."
                },
                {
                    question: "Sudut apakah ini?",
                    image: createAngleSVG(135),
                    options: ["Sudut lancip", "Sudut siku-siku", "Sudut tumpul", "Sudut lurus"],
                    answer: "Sudut tumpul",
                    hint: "Sudut ini lebih dari 90 derajat tetapi kurang dari 180 derajat."
                },
                {
                    question: "Sudut apakah ini?",
                    image: createAngleSVG(180),
                    options: ["Sudut lancip", "Sudut siku-siku", "Sudut tumpul", "Sudut lurus"],
                    answer: "Sudut lurus",
                    hint: "Sudut ini besarnya 180 derajat."
                },
                {
                    question: "Berapa jumlah sudut dalam segitiga?",
                    image: createShapeSVG("triangle"),
                    options: ["90°", "180°", "270°", "360°"],
                    answer: "180°",
                    hint: "Jumlah sudut dalam segitiga selalu tetap."
                }
            ],
            
            // Level 3 - Area and Perimeter
            [
                {
                    question: "Rumus luas persegi adalah...",
                    image: createShapeSVG("square", "s"),
                    options: ["s × s", "2 × (s + s)", "s × 4", "s²"],
                    answer: "s × s",
                    hint: "Luas adalah hasil kali panjang dan lebar. Pada persegi, panjang = lebar = s."
                },
                {
                    question: "Rumus keliling persegi adalah...",
                    image: createShapeSVG("square", "s"),
                    options: ["s × s", "4 × s", "2 × s", "s + s"],
                    answer: "4 × s",
                    hint: "Keliling adalah jumlah semua sisi. Persegi memiliki 4 sisi yang sama panjang."
                },
                {
                    question: "Rumus luas persegi panjang adalah...",
                    image: createShapeSVG("rectangle", "p,l"),
                    options: ["p × l", "2 × (p + l)", "p + l", "p × p"],
                    answer: "p × l",
                    hint: "Luas adalah hasil kali panjang (p) dan lebar (l)."
                },
                {
                    question: "Rumus keliling persegi panjang adalah...",
                    image: createShapeSVG("rectangle", "p,l"),
                    options: ["p × l", "2 × (p + l)", "p + l", "4 × p"],
                    answer: "2 × (p + l)",
                    hint: "Keliling adalah jumlah semua sisi. Persegi panjang memiliki 2 sisi panjang dan 2 sisi lebar."
                },
                {
                    question: "Rumus luas segitiga adalah...",
                    image: createShapeSVG("triangle", "a,t"),
                    options: ["a × t", "½ × a × t", "a + t", "a × a"],
                    answer: "½ × a × t",
                    hint: "a adalah alas dan t adalah tinggi segitiga."
                }
            ],
            
            // Level 4 - Advanced Shapes
            [
                {
                    question: "Berapa jumlah sisi pada trapesium?",
                    image: createShapeSVG("trapezoid"),
                    options: ["3", "4", "5", "6"],
                    answer: "4",
                    hint: "Trapesium adalah segiempat dengan sepasang sisi sejajar."
                },
                {
                    question: "Rumus luas lingkaran adalah...",
                    image: createShapeSVG("circle", "r"),
                    options: ["2 × π × r", "π × r²", "π × d", "2 × r"],
                    answer: "π × r²",
                    hint: "r adalah jari-jari lingkaran dan π (pi) adalah konstanta dengan nilai sekitar 3,14."
                },
                {
                    question: "Rumus keliling lingkaran adalah...",
                    image: createShapeSVG("circle", "r"),
                    options: ["2 × π × r", "π × r²", "π × d", "r + r"],
                    answer: "2 × π × r",
                    hint: "r adalah jari-jari lingkaran dan π (pi) adalah konstanta dengan nilai sekitar 3,14."
                },
                {
                    question: "Berapa jumlah diagonal pada segiempat?",
                    image: createShapeSVG("square"),
                    options: ["1", "2", "3", "4"],
                    answer: "2",
                    hint: "Diagonal adalah garis yang menghubungkan dua sudut yang tidak berdekatan."
                },
                {
                    question: "Rumus luas jajargenjang adalah...",
                    image: createShapeSVG("parallelogram", "a,t"),
                    options: ["a × t", "½ × a × t", "a + t", "2 × (a + t)"],
                    answer: "a × t",
                    hint: "a adalah alas dan t adalah tinggi jajargenjang."
                }
            ],
            
            // Level 5 - Problem Solving
            [
                {
                    question: "Sebuah persegi memiliki sisi 5 cm. Berapakah luasnya?",
                    image: createShapeSVG("square", "5 cm"),
                    options: ["10 cm²", "15 cm²", "20 cm²", "25 cm²"],
                    answer: "25 cm²",
                    hint: "Gunakan rumus luas persegi: s × s"
                },
                {
                    question: "Sebuah persegi panjang memiliki panjang 8 cm dan lebar 5 cm. Berapakah kelilingnya?",
                    image: createShapeSVG("rectangle", "8 cm,5 cm"),
                    options: ["13 cm", "26 cm", "40 cm", "64 cm"],
                    answer: "26 cm",
                    hint: "Gunakan rumus keliling persegi panjang: 2 × (p + l)"
                },
                {
                    question: "Sebuah segitiga memiliki alas 6 cm dan tinggi 8 cm. Berapakah luasnya?",
                    image: createShapeSVG("triangle", "6 cm,8 cm"),
                    options: ["24 cm²", "48 cm²", "14 cm²", "30 cm²"],
                    answer: "24 cm²",
                    hint: "Gunakan rumus luas segitiga: ½ × a × t"
                },
                {
                    question: "Sebuah lingkaran memiliki jari-jari 7 cm. Berapakah kelilingnya? (π = 3,14)",
                    image: createShapeSVG("circle", "7 cm"),
                    options: ["21,98 cm", "43,96 cm", "153,86 cm", "14 cm"],
                    answer: "43,96 cm",
                    hint: "Gunakan rumus keliling lingkaran: 2 × π × r"
                },
                {
                    question: "Sebuah jajargenjang memiliki alas 9 cm dan tinggi 4 cm. Berapakah luasnya?",
                    image: createShapeSVG("parallelogram", "9 cm,4 cm"),
                    options: ["18 cm²", "26 cm²", "36 cm²", "13 cm²"],
                    answer: "36 cm²",
                    hint: "Gunakan rumus luas jajargenjang: a × t"
                }
            ]
        ];
        
        // Create SVG for shapes with cyberpunk style
        function createShapeSVG(shape, label = "") {
            const svg = document.createElement('div');
            svg.className = "shape bg-cyber-gray p-4 rounded-lg inline-block cyber-border";
            
            // Get random color from cyberpunk palette
            const colorIndex = Math.floor(Math.random() * cyberColors.fill.length);
            const fillColor = cyberColors.fill[colorIndex];
            const strokeColor = cyberColors.stroke[colorIndex];
            
            let svgContent = "";
            let labelContent = "";
            
            const glowEffect = `filter: drop-shadow(0 0 3px ${fillColor});`;
            
            switch(shape) {
                case "triangle":
                    svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 150 150" style="${glowEffect}">
                        <polygon points="75,20 20,130 130,130" fill="${fillColor}" stroke="${strokeColor}" stroke-width="2" />
                    </svg>`;
                    
                    if (label) {
                        const labels = label.split(',');
                        if (labels.length === 1) {
                            labelContent = `<div class="text-center mt-2 text-${fillColor.replace('#', '')} font-medium">${labels[0]}</div>`;
                        } else if (labels.length === 2) {
                            labelContent = `
                                <div class="flex justify-between mt-2">
                                    <span class="text-${fillColor.replace('#', '')} font-medium">a = ${labels[0]}</span>
                                    <span class="text-${fillColor.replace('#', '')} font-medium">t = ${labels[1]}</span>
                                </div>
                            `;
                        }
                    }
                    break;
                    
                case "square":
                    svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 150 150" style="${glowEffect}">
                        <rect x="25" y="25" width="100" height="100" fill="${fillColor}" stroke="${strokeColor}" stroke-width="2" />
                    </svg>`;
                    
                    if (label) {
                        labelContent = `<div class="text-center mt-2 text-${fillColor.replace('#', '')} font-medium">s = ${label}</div>`;
                    }
                    break;
                    
                case "rectangle":
                    svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 150 150" style="${glowEffect}">
                        <rect x="25" y="40" width="100" height="70" fill="${fillColor}" stroke="${strokeColor}" stroke-width="2" />
                    </svg>`;
                    
                    if (label) {
                        const labels = label.split(',');
                        if (labels.length === 2) {
                            labelContent = `
                                <div class="flex justify-between mt-2">
                                    <span class="text-${fillColor.replace('#', '')} font-medium">p = ${labels[0]}</span>
                                    <span class="text-${fillColor.replace('#', '')} font-medium">l = ${labels[1]}</span>
                                </div>
                            `;
                        }
                    }
                    break;
                    
                case "circle":
                    svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 150 150" style="${glowEffect}">
                        <circle cx="75" cy="75" r="50" fill="${fillColor}" stroke="${strokeColor}" stroke-width="2" />
                    </svg>`;
                    
                    if (label) {
                        labelContent = `<div class="text-center mt-2 text-${fillColor.replace('#', '')} font-medium">r = ${label}</div>`;
                    }
                    break;
                    
                case "pentagon":
                    svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 150 150" style="${glowEffect}">
                        <polygon points="75,20 130,60 110,120 40,120 20,60" fill="${fillColor}" stroke="${strokeColor}" stroke-width="2" />
                    </svg>`;
                    break;
                    
                case "trapezoid":
                    svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 150 150" style="${glowEffect}">
                        <polygon points="30,50 120,50 140,100 10,100" fill="${fillColor}" stroke="${strokeColor}" stroke-width="2" />
                    </svg>`;
                    break;
                    
                case "parallelogram":
                    svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 150 150" style="${glowEffect}">
                        <polygon points="40,40 120,40 100,110 20,110" fill="${fillColor}" stroke="${strokeColor}" stroke-width="2" />
                    </svg>`;
                    
                    if (label) {
                        const labels = label.split(',');
                        if (labels.length === 2) {
                            labelContent = `
                                <div class="flex justify-between mt-2">
                                    <span class="text-${fillColor.replace('#', '')} font-medium">a = ${labels[0]}</span>
                                    <span class="text-${fillColor.replace('#', '')} font-medium">t = ${labels[1]}</span>
                                </div>
                            `;
                        }
                    }
                    break;
            }
            
            svg.innerHTML = svgContent + labelContent;
            return svg;
        }
        
        // Create SVG for angles with cyberpunk style
        function createAngleSVG(degrees) {
            const svg = document.createElement('div');
            svg.className = "shape bg-cyber-gray p-4 rounded-lg inline-block cyber-border";
            
            // Get random color from cyberpunk palette
            const colorIndex = Math.floor(Math.random() * cyberColors.fill.length);
            const fillColor = cyberColors.fill[colorIndex];
            const strokeColor = cyberColors.stroke[colorIndex];
            
            // Convert degrees to radians for calculation
            const radians = (degrees * Math.PI) / 180;
            
            // Calculate end point of the angle line
            const radius = 50;
            const x = 75 + radius * Math.cos(radians);
            const y = 75 - radius * Math.sin(radians);
            
            const glowEffect = `filter: drop-shadow(0 0 3px ${fillColor});`;
            
            const svgContent = `
                <svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 150 150" style="${glowEffect}">
                    <line x1="75" y1="75" x2="125" y2="75" stroke="${strokeColor}" stroke-width="2" />
                    <line x1="75" y1="75" x2="${x}" y2="${y}" stroke="${strokeColor}" stroke-width="2" />
                    <path d="M 85 75 A 10 10 0 0 0 ${75 + 10 * Math.cos(radians)} ${75 - 10 * Math.sin(radians)}" fill="none" stroke="${fillColor}" stroke-width="2" />
                    <text x="95" y="65" font-size="12" fill="${fillColor}" style="font-family: 'Orbitron', sans-serif;">${degrees}°</text>
                </svg>
                <div class="text-center mt-2 text-${fillColor.replace('#', '')} font-medium cyber-font">${degrees}°</div>
            `;
            
            svg.innerHTML = svgContent;
            return svg;
        }
        
        // Initialize game
        function initGame() {
            currentLevel = 1;
            currentQuestion = 0;
            score = 0;
            lives = 3;
            
            updateUI();
            loadQuestions();
            showScreen(startScreen);
        }
        
        // Load questions for current level
        function loadQuestions() {
            questions = allQuestions[currentLevel - 1];
            shuffleArray(questions);
        }
        
        // Shuffle array (Fisher-Yates algorithm)
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
        
        // Show a specific screen
        function showScreen(screen) {
            startScreen.classList.add('hidden');
            questionScreen.classList.add('hidden');
            gameOverScreen.classList.add('hidden');
            victoryScreen.classList.add('hidden');
            
            screen.classList.remove('hidden');
        }
        
        // Update UI elements
        function updateUI() {
            levelElement.textContent = currentLevel;
            scoreElement.textContent = score;
            livesElement.textContent = '❤️'.repeat(lives);
            
            // Update progress bar
            const progress = (currentQuestion / questions.length) * 100;
            progressBar.style.width = `${progress}%`;
        }
        
        // Display current question
        function displayQuestion() {
            const question = questions[currentQuestion];
            
            questionText.textContent = question.question;
            
            // Clear previous image and add new one
            questionImage.innerHTML = '';
            questionImage.appendChild(question.image);
            
            // Create option buttons
            optionsContainer.innerHTML = '';
            question.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.className = 'option bg-cyber-gray border border-neon-blue text-white hover:border-neon-pink py-3 px-4 rounded transition w-full text-left';
                button.textContent = option;
                button.dataset.option = option;
                
                button.addEventListener('click', () => selectAnswer(option));
                optionsContainer.appendChild(button);
            });
            
            // Hide feedback and next button
            feedback.classList.add('hidden');
            nextButton.classList.add('hidden');
            
            // Reset hint usage
            usedHint = false;
            
            updateUI();
        }
        
        // Select an answer
        function selectAnswer(selectedOption) {
            const question = questions[currentQuestion];
            const isCorrect = selectedOption === question.answer;
            
            // Disable all option buttons
            const optionButtons = optionsContainer.querySelectorAll('.option');
            optionButtons.forEach(button => {
                button.disabled = true;
                
                if (button.dataset.option === question.answer) {
                    button.classList.remove('border-neon-blue');
                    button.classList.add('border-neon-green', 'text-neon-green');
                } else if (button.dataset.option === selectedOption && !isCorrect) {
                    button.classList.remove('border-neon-blue');
                    button.classList.add('border-neon-pink', 'text-neon-pink');
                }
            });
            
            // Show feedback
            feedback.classList.remove('hidden', 'bg-cyber-gray', 'border-neon-green', 'text-neon-green', 'border-neon-pink', 'text-neon-pink');
            
            if (isCorrect) {
                feedback.classList.add('bg-cyber-gray', 'border', 'border-neon-green', 'text-neon-green');
                feedback.innerHTML = '<span class="font-bold">BENAR!</span> Jawaban Anda tepat.';
                
                // Add points
                const pointsEarned = usedHint ? 5 : 10;
                score += pointsEarned;
                
                // Create celebration effect
                createCelebration();
            } else {
                feedback.classList.add('bg-cyber-gray', 'border', 'border-neon-pink', 'text-neon-pink');
                feedback.innerHTML = `<span class="font-bold">SALAH!</span> Jawaban yang benar adalah: ${question.answer}`;
                
                // Lose a life
                lives--;
                
                // Shake the wrong answer
                const wrongButton = Array.from(optionButtons).find(button => button.dataset.option === selectedOption);
                wrongButton.classList.add('wrong-answer');
            }
            
            // Update UI
            updateUI();
            
            // Show next button
            nextButton.classList.remove('hidden');
            
            // Check if game over
            if (lives <= 0) {
                setTimeout(() => {
                    finalScoreElement.textContent = score;
                    showScreen(gameOverScreen);
                }, 1500);
            }
        }
        
        // Show hint
        function showHint() {
            const question = questions[currentQuestion];
            
            feedback.classList.remove('hidden');
            feedback.classList.add('bg-cyber-gray', 'border', 'border-neon-yellow', 'text-neon-yellow');
            feedback.innerHTML = `<span class="font-bold">PETUNJUK:</span> ${question.hint}`;
            
            usedHint = true;
        }
        
        // Go to next question
        function nextQuestion() {
            currentQuestion++;
            
            if (currentQuestion >= questions.length) {
                // Level completed
                if (currentLevel < allQuestions.length) {
                    currentLevel++;
                    currentQuestion = 0;
                    loadQuestions();
                } else {
                    // Game completed
                    victoryScoreElement.textContent = score;
                    showScreen(victoryScreen);
                    return;
                }
            }
            
            displayQuestion();
        }
        
        // Create celebration effect
        function createCelebration() {
            const correctButton = Array.from(optionsContainer.querySelectorAll('.option')).find(button => button.dataset.option === questions[currentQuestion].answer);
            correctButton.classList.add('correct-answer');
            
            // Create cyber particles
            for (let i = 0; i < 10; i++) {
                const particle = document.createElement('div');
                particle.className = 'celebration';
                
                // Random cyber symbol
                const symbols = ['⚡', '✧', '◈', '⬢', '⬡', '◉', '◎', '⚪', '⚫', '⬤'];
                const colorClass = cyberColors.fill[Math.floor(Math.random() * cyberColors.fill.length)];
                
                particle.innerHTML = `<span style="color: ${colorClass}; text-shadow: 0 0 5px ${colorClass};">${symbols[Math.floor(Math.random() * symbols.length)]}</span>`;
                particle.style.fontSize = `${Math.random() * 20 + 20}px`;
                particle.style.position = 'absolute';
                particle.style.left = `${Math.random() * 100}%`;
                particle.style.top = `${Math.random() * 100}%`;
                document.body.appendChild(particle);
                
                // Animate
                particle.animate([
                    { transform: 'translateY(0) rotate(0deg)', opacity: 1 },
                    { transform: `translateY(-${Math.random() * 100 + 50}px) rotate(${Math.random() * 360}deg)`, opacity: 0 }
                ], {
                    duration: 1000,
                    easing: 'ease-out'
                }).onfinish = () => particle.remove();
            }
        }
        
        // Event listeners
        startButton.addEventListener('click', () => {
            showScreen(questionScreen);
            displayQuestion();
        });
        
        hintButton.addEventListener('click', showHint);
        nextButton.addEventListener('click', nextQuestion);
        
        restartButton.addEventListener('click', () => {
            initGame();
            showScreen(startScreen);
        });
        
        playAgainButton.addEventListener('click', () => {
            initGame();
            showScreen(startScreen);
        });
        
        // Initialize the game
        initGame();
    });
</script>
